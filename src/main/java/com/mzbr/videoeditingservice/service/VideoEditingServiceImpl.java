package com.mzbr.videoeditingservice.service;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.StandardCopyOption;import java.util.ArrayList;import java.util.List;import java.util.StringJoiner;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.io.Resource;import org.springframework.core.io.ResourceLoader;import org.springframework.stereotype.Service;import com.github.kokorin.jaffree.ffmpeg.*;import com.mzbr.videoeditingservice.model.Audio;import com.mzbr.videoeditingservice.model.Clip;import com.mzbr.videoeditingservice.model.VideoEntity;import lombok.extern.slf4j.Slf4j;@Service@Slf4jpublic class VideoEditingServiceImpl implements VideoEditingService {	@Override	public String processVideo(VideoEntity videoEntity, int width, int height) throws Exception {		return null;	}	@Override	public List<Input> prepareVideoInputs(List<Clip> clips) throws Exception {		List<Input> inputs = new ArrayList<>();		return null;	}	@Override	public String generateVideoCropAndLayoutFilter(List<Clip> clips, Integer scaleX, Integer scaleY) throws Exception {		StringJoiner filterJoiner = new StringJoiner(";");		for (int i = 0; i < clips.size(); i++) {			Clip clip = clips.get(i);			StringBuilder baseFilter = new StringBuilder();			baseFilter.append(String.format("[%d:v]setpts=PTS-STARTPTS", i));			if (clip.getCrop() != null) {				Integer newWidth = (int)(clip.getWidth() / clip.getCrop().getZoomFactor());				Integer newHeight = (int)(clip.getHeight() / clip.getCrop().getZoomFactor());				baseFilter.append(String.format(",crop=%d:%d:%d:%d",					newWidth, newHeight, clip.getCrop().getStartX(), clip.getCrop().getStartY()));			}			baseFilter.append(String.format(",scale=%d:%d", scaleX, scaleY));			filterJoiner.add(baseFilter + String.format("[v%d]", i));		}		return filterJoiner.toString();	}	@Override	public String generateAudioVolumeFilter(List<Clip> clips) throws Exception {		StringJoiner filterJoiner = new StringJoiner(";");		for (int i = 0; i < clips.size(); i++) {			Clip clip = clips.get(i);			if (clip.getVolume() != null) { // 불륨 조정이 필요한 경우에만 필터를 추가합니다.				filterJoiner.add(String.format("[%d:a]volume=%.2f[a%d]", i, clip.getVolume(), i));			}		}		return filterJoiner.toString();	}	@Override	public String generateConcatVideoFilter(Integer clipCount) throws Exception {		StringBuilder filterBuilder = new StringBuilder();		for (int i = 0; i < clipCount; i++) {			filterBuilder.append(String.format("[v%d][a%d]", i, i));		}		filterBuilder.append(String.format("concat=n=%d:v=1:a=1[outv][outa];", clipCount));		filterBuilder.append("[outa][2:a]amix=inputs=2:duration=first[a_final]");		return filterBuilder.toString();	}	@Override	public Input insertAudioToVideo(Audio audio) throws Exception {		return null;	}	@Override	public List<String> splitVideoIntoSegments(FFmpeg fFmpeg, int perSegmentSec) throws Exception {		return null;	}	@Override	public void uploadTempFileToS3(List<String> fileLocations) throws Exception {	}	@Override	public void deleteTemporaryFile(List<String> fileLocations) throws Exception {	}}